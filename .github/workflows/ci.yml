name: CI

on:
  push:
    branches:
      - main
      - dev
      - integration
  release:
    types: [ published ]

jobs:
  integration:
    name: Build Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [ "7.4", "8.0" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Install dependencies
        run: |
          (curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.17.0/pack-v0.17.0-linux.tgz" | sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack)
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - run: |
          npm config set //registry.npmjs.org/:_authToken ${NODE_AUTH_TOKEN}
          echo "@laraboot-io:registry=https://registry.npmjs.org" >> ~/.npmrc
          npm i -g @laraboot-io/cli@1.2.4
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Laraboot login
        env:
          LARABOOT_AUTH_TOKEN: ${{ secrets.LARABOOT_AUTH_TOKEN }}
          LARABOOT_USERNAME: ${{ secrets.LARABOOT_USERNAME }}
        run: |
          laraboot --version
          echo "${LARABOOT_AUTH_TOKEN}" | laraboot login --user="${LARABOOT_USERNAME}" -vvv
      - name: Integration test
        id: int-test
        env:
          ECR_REGISTRY: ghcr.io/laraboot-io
          PHP_VERSION: ${{ matrix.php }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |

          readonly PROJECT_NAME="demo"
          readonly PROJECT_DESC="this"
          readonly PROJECT_VERSION="0.1"

          # Enable network communication with Docker socket.
          sudo chmod 666 /var/run/docker.sock

          mkdir $PROJECT_NAME
          cd $PROJECT_NAME
          ls -ltah /opt/hostedtoolcache/node/12.22.1/x64/lib/node_modules/@laraboot-io/cli/src
          ls -ltah /opt/hostedtoolcache/node/12.22.1/x64/lib/node_modules/@laraboot-io/cli/stubs
          laraboot project create "$PROJECT_NAME" --skip-laravel-installer --directory=`pwd` -vvv || exit 125

          laraboot task add laraboot-io/laraboot-buildpacks/laraboot-hook-before-pack && \
          laraboot task add laraboot-io/laraboot-buildpacks/laravel-foundation-provider && \
          laraboot task add laraboot-io/laraboot-buildpacks/laravel-config && \
          laraboot task add laraboot-io/laraboot-buildpacks/laravel-models && \
          laraboot task add laraboot-io/laraboot-buildpacks/laraboot-model-views && \
          laraboot task add laraboot-io/laraboot-buildpacks/laraboot-packer && \
          laraboot task add laraboot-io/laraboot-buildpacks/laravel-outofthebox

          # laraboot task create my-task -vvv
          # ls -ltah .laraboot/tasks/my-task

          # Debug
          cat laraboot.json

          # Copy necessary file
          cp -a ../src/vercel-files/. ./

          laraboot build dev
          docker images

          image_id=$(docker run -id $PROJECT_NAME)
          docker cp $image_id:/layers/laraboot-buildpacks_laraboot-packer/laraboot/app.tar.gz app.tar.gz
          ls -ltah app.tar.gz

      - name: Upload buildpacks
        uses: actions/upload-artifact@v2
        with:
          name: app-php${{ matrix.php }}
          path: demo/app.tar.gz

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: integration
    strategy:
      matrix:
        php: [ "7.4" ]
    steps:
      - name: Extract Branch Name
        run: echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
      - name: Download buildpacks
        uses: actions/download-artifact@v2
        with:
          name: app-php${{ matrix.php }}
      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
      - run: |
          tar -xzvf app.tar.gz -C . && \
          rm app.tar.gz

          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"

          git init && \
          git add .

          rm -rf ./vendor
          composer install

          touch database/database.sqlite
          DB_CONNECTION=sqlite DB_DATABASE=`pwd`/database/database.sqlite php artisan migrate:refresh --seed --force
          php artisan view:cache

          chmod -R 777 resources/views

          rm .env
          git add . && \
          git commit -m "Migration"

      - name: Preview release
        uses: ngduc/vercel-deploy-action@master
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        with:
          vercel-cli: vercel
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
          vercel-args: '' #Optional
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}  #Required
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}} #Required
          working-directory: ./
      - name: Release into production
        if: ${{ matrix.php == '7.4' && github.event_name == 'release' }}
        uses: ngduc/vercel-deploy-action@master
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        with:
          vercel-cli: vercel
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
          vercel-args: '--prod' #Optional
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}  #Required
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}} #Required
          working-directory: ./
